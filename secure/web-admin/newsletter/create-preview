#!/usr/bin/perl -w

# create-preview:
# Used to create HTML mails
# 
# Command line arguments are type (html, plain, or email), and optionally email
# address to send proof to.
# Pass in, as STDIN or filename in 4th argument some Markdown text.

use strict;
use FindBin;
use lib "$FindBin::Bin/../../../commonlib/perllib";
use Net::SMTP;
use POSIX qw(strftime);
use Text::Wrap qw();
use mySociety::Email;
use mySociety::Config;
use Markdown;

mySociety::Config::set_file( "$FindBin::Bin/../../conf/general" );

my $from = mySociety::Config::get('NEWSLETTER_MYSOC_FROM');

my ($type, $email) = (shift, shift);
unless ($type) {
    print "Usage: $0 TYPE [EMAIL]\n";
    exit;
}

my $text = join('', <>);
$text =~ s/\r//g;
my ($subject) = $text =~ /^(.*)\n+/;
$text =~ s/^$subject\n+//;
$text =~ s/\n+$//;

my $out;
if ($type eq 'html') {
    $out = create_html($text, $subject);
} elsif ($type eq 'plain') {
    $out = create_plain($text);
} elsif ($type eq 'email-html') {
    $out = construct_email($text, $subject);
} elsif ($type eq 'email-plain') {
    $out = construct_plain($text, $subject);
} else {
    die "Illegal type used!";
}
$out =~ s/\n/\r\n/g;

if ($email) {
    my $smtp = Net::SMTP->new('localhost');
    $smtp->mail($from);
    $smtp->to($email) or die "Could not set TO: $!";
    $smtp->data($out) or die "Could not send DATA: $!";
    $smtp->quit();
} else {
    print $out;
}

# construct_plain TEXT SUBJECT
# Given constituent parts, construct a non-HTML email
sub construct_plain {
    my ($text, $subject) = @_;
    my $plain = create_plain($text);
    $plain = construct_part($plain, 0);
    my $email = <<EOF;
Subject: $subject
MIME-Version: 1.0
$plain
EOF
    return $email;
}

# construct_email TEXT SUBJECT
# Given constituent parts, construct an HTML email
sub construct_email {
    my ($text, $subject) = @_;
    my $plain = create_plain($text);
    my $html = create_html($text, $subject);
    $plain = construct_part($plain, 0);
    $html = construct_part($html, 1);
    my $boundary = '----=_NextPart_000_6C92_50657469.74696F6E';
    my $id = strftime('%Y-%m-%d.%H-%M-%S.message@news.mysociety.org', localtime());
    my $date = strftime('%a, %d %b %Y %H:%M:%S %z', localtime());
    my $email = <<EOF;
From: Myf Nixon <$from>
To: mySociety Newsletter <news\@lists.mysociety.org>
Date: $date
Message-Id: <$id>
Subject: $subject
MIME-Version: 1.0
Content-Type: multipart/alternative;
        boundary="$boundary"

This is a multi-part message in MIME format.

--$boundary
$plain

--$boundary
$html

--$boundary--
EOF
    return $email;
}

# creeate_html TEXT
# Given some TEXT in the right format, create the HTML contents
sub create_html {
    my ($in, $subject) = @_;
    $_ = Markdown::Markdown($in);

    # Set up generic styles
    my $style_bullet = "font-family:Georgia, 'Times New Roman', Times, serif; font-size:14px; color:#2c9e2c;";
    my $style_body   = "font-family:Georgia, 'Times New Roman', Times, serif; color:#414141; font-size:14px;";
    my $style_head   = "font-family:Georgia, 'Times New Roman', Times, serif; font-size:18px; color:#333; font-weight:normal; text-transform:uppercase; line-height:20px;";
    my $style_link   = "color:#2c9e2c;text-decoration:underline;";
    my $style_toc    = "font-family:Helvetica, Arial, sans-serif; font-size:16px; font-weight:bold;";
    (my $style_larger = $style_body) =~ s/14px/16px/;

    # Links
    s/(<a[^>]*)>/$1 style="$style_link">/g;

    # Separators
    # Used to be <td style="font-size:16px; color: #fff; background-color: #fff; border: 1px dotted #2c9e2c; border-style: none none dotted;"><br></td>
    s{\n\n<hr \/>}{</td>
    </tr>
    <tr>
      <td><hr style="color: #fff; background-color: #fff; border: 1px dotted #2c9e2c; border-style: none none dotted; display:block;"></td>
    </tr>
    <tr>
      <td><br>}g;

    # Headings
    s{<h1>(.*?)</h1>}{};
    my $heading = $1;
    s{\n\n<h2>(.*?)</h2>}{<span style="$style_head">$1</span>}g;

    # Paragraphs
    s{</p>\s*<p>}{<br><br>\n}g;
    s{\n\n<p>(.*?)</p>}{<br>\n<br>\n<span style="$style_larger">$1</span>}s;
    s{\n\n<p>(.*?)</p>}{<br>\n<br>\n<span style="$style_body">$1</span>}gs;

    # Contents list
    my ($first_list) = m{<ul>(.*?)</ul>}s;
    if ($first_list) {
        my $copy = $first_list;
        $copy =~ s{<li>(.*?)</li>}{<span style="$style_toc"><span style="color:#ccea64;">&raquo;</span> $1</span><br>}g;
        s/\Q$first_list\E/$copy/;
        s{<ul>(.*?)</ul>}{$1<br>\n\n}s;
    }

    # Other lists
    s{<li><p>(.*?)</p></li>}{  <tr>
      <td align="left" valign="top" style="$style_bullet">&raquo;</td>
      <td align="left" valign="top" style="$style_body">$1<br><br></td>
    </tr>}gs;
    s{<li>(.*?)</li>}{  <tr>
      <td align="left" valign="top" style="$style_bullet">&raquo;</td>
      <td align="left" valign="top" style="$style_body">$1<br></td>
    </tr>}gs;
    s{<ul>(.*?)</ul>}{
    <br>
    <br>
    <table width="600" border="0">
    $1
    </table>
    }gs;

    # Tidy up extra <br>s
    s{<br>\s*<br>\s*(</td>\s*</tr>\s*</table>)}{$1}g;
    s{(</table>\s*<br>)\s*<br>}{$1}g;

    # Output
    my $date = `php -r"print date('jS F Y');"`;
    my $html = <<EOF;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>mySociety Newsletter</title>
</head>

<body>
<table width="100%" border="0">
  <tr>
    <td align="center" valign="top"><table width="600" border="0">
      <tr>
        <td colspan="2"><table width="600" border="0" cellpadding="8">
  <tr>
    <td><span style="font-family:Helvetica, Arial, sans-serif; font-size:35px; font-weight:bold; color:#000;">mySociety <span style="color:#ccea64;">&raquo;</span> $heading</span><br>
          <span style="font-family:Helvetica, Arial, sans-serif; font-size:18px; font-weight:bold; color:#646464;">$date</span></td>
  </tr>
</table>
<table width="100%" border="0">
          <tr>
            <td><hr style="color: #fff; background-color: #fff; border: 1px dotted #2c9e2c; border-style: none none dotted; display:block;"></td>
          </tr>
        </table>
</td>
        </tr>
      <tr>
        <td align="left" valign="top"><table width="600" border="0">
          <tr>
            <td>
$_
          <br></td></tr>
        </table></td>
      </tr>
      <tr>
        <td colspan="2" align="center" valign="top" style="font-family:Helvetica, Arial, sans-serif; font-size:12px; font-weight:normal; color:#666666;"><table width="100%" border="0">
          <tr>
            <td><hr style="color: #fff; background-color: #fff; border: 1px dotted #2c9e2c; border-style: none none dotted; display:block;"></td>
          </tr>
        </table>
          <br>
          mySociety is a project of UK Citizens Online Democracy (UKCOD).<br>UKCOD is a registered charity in England and Wales, no. 1076346. </td>
        </tr>
    </table></td>
  </tr>
</table>
</body>
</html>
EOF
    $html = wrap_text($html);
    return $html;
}

# create_plain TEXT
# Given some text, wordwraps it and converts the links
sub create_plain {
    $_ = shift;
    # Links
    s{\[([^]]*)\]\(mailto:([^)]*)\)}{$1 <$2>}gs;
    s{\[([^]]*)\]\(([^)]*)\)}{$1 <$2>}gs;
    # Emphasis
    s{\*\*}{*}gs;
    # Rules
    s{\n\n-{3,}\n\n}{\n\n}g;
    # Headings
    s/([\w,.!?>])\n([\w<]|- )/$1 $2/g;
    $_ .= <<EOF;


-- 
mySociety is a project of UK Citizens Online Democracy (UKCOD).
UKCOD is a registered charity in England and Wales, no. 1076346.
EOF
    $_ = wrap_text($_);
    return $_;
}

sub wrap_text {
    $_ = shift;
    local($Text::Wrap::columns) = 76;
    local($Text::Wrap::huge) = 'overflow';
    local($Text::Wrap::unexpand) = 0;
    s/<([^>]+?) /<$1*/g;
    s/Times New Roman/Times*New*Roman/g;
    $_ = Text::Wrap::wrap('', '', $_);
    s/<([^>]+?)\*/<$1 /g;
    s/Times\*New\*Roman/Times New Roman/g;
    s/^[ \t]+$//mg;
    return $_;
}

# construct_part BODY IS-HTML
# Given already wrapped text or HTML, does correct MIME quoting if needed,
# and returns a multipart
sub construct_part {
    my ($body, $ishtml) = @_;
    my($enc, %hdr);
    ($enc, $body) = mySociety::Email::encode_string($body);
    $hdr{'Content-Type'} = "text/plain; charset=\"$enc\"";
    if ($enc eq 'us-ascii') {
        $hdr{'Content-Transfer-Encoding'} = '7bit';
    } else {
        $hdr{'Content-Transfer-Encoding'} = 'quoted-printable';
        $body = mySociety::Email::encode_qp($body, "\n");
    }

    my $out = '';
    foreach (keys %hdr) {
        my $h = $hdr{$_};
        $h =~ s/\r?\n/ /gs;
        $out .= "$_: $h\n";
    }
    $out .= "\n" . $body;
    $out =~ s/text\/plain/text\/html/ if $ishtml;
    $out =~ s/iso-8859-1/us-ascii/ if $out =~ /us-ascii/;
    return $out;
}

sub make_html {
}
